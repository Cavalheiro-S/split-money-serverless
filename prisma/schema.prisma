// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(uuid())
  email         String          @unique
  name          String?
  password      String
  loginMethod   String
  balance       Float
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  PasswordReset PasswordReset[]
  refreshToken  RefreshToken[]
  transaction   Transaction[]

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt Int
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@map("refresh_tokens")
}

model PasswordReset {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])

  @@index([token])
  @@map("passwords_reset")
}

model Transaction {
  id              String          @id @default(uuid())
  description     String
  date            DateTime
  amount          Float
  type            String
  category        String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  paymentStatusId String?
  userId          String
  parentId        String?
  paymentStatus   PaymentStatus?  @relation("PaymentStatusTransaction", fields: [paymentStatusId], references: [id])
  parent          Transaction?    @relation("ParentChild", fields: [parentId], references: [id])
  children        Transaction[]   @relation("ParentChild")
  user            User            @relation(fields: [userId], references: [id])

  @@map("transactions")
}

model PaymentStatus {
  id            String        @id @default(uuid())
  status        String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  Transaction Transaction[] @relation("PaymentStatusTransaction")

  @@map("payment_status")
}
